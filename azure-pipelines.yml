trigger: none

pool:
  vmImage: ubuntu-latest

# resources:
#   repositories:
#     - repository: secondRepo
#       type: github
#       name: prathibhapadma/azure-aks-kubernetes-masterclass
#       ref: $(Build.SourceBranch)
#       endpoint: prathibhapadma

steps:
- checkout: self
- checkout: secondRepo
- script: |
    echo Hello.
  displayName: 'Run a multi-repo'
  continueOnError: true  
  

# trigger: none

# pool: self-hosted-agent-win
#   #vmImage: windows-latest

# variables:
#   npm_config_cache: '$(Agent.ToolsDirectory)/' #'C:/hostedtoolcache/windows' #/.npm' #'$(Agent.ToolsDirectory)\.npm' #$(Agent.HomeDirectory)/.npm node
#   dotnet_config_cache: 'C:/hostedtoolcache/windows/dotnet'
#   node_config_cache: 'C:/hostedtoolcache/windows'


# stages:
#   - stage: Build
#     jobs:
#       - job: Build
#         displayName: "Angular App Build"
#         # workspace:
#         #   clean: all
#         steps:
#           - task: NodeTool@0
#             inputs:
#               versionSpec: "8.12.0"
#             displayName: "Install Node.js"
#           - task: Npm@1
#             inputs:
#               command: "install"
#               displayName: "Npm Install"
#           - task: PowerShell@2
#             inputs:
#               targetType: 'inline'
#               script: |
#                 echo "node --version"
#                 node -v
#                   #npm install npm@6.9.0 -g
#                 echo "npm version"
#                 npm -v 

# - task: Cache@2
#   displayName: 'Cache'
#   inputs:
#     key: $(Build.SourcesDirectory)/package.json    #'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/package.json' | $(Build.SourcesDirectory)/package-lock.json | 
#     # restoreKeys: |
#     #   npm | "$(Agent.OS)"
#     #   npm
#     path: '$(npm_config_cache)'
#     cacheHitVar: 'CACHE_RESTORED' 
# - task: NodeTool@0
#   displayName: 'Install Node 8.9.1' 
#   #condition: eq(variables.CACHE_RESTORED, 'true')
#   #enabled: true
#   inputs:
#     versionSpec: '8.9.1'
#     workingDir: '$(Build.SourcesDirectory)/'
#   retryCountOnTaskFailure: 5    
# - task: PowerShell@2
#   inputs:
#     targetType: 'inline'
#     script: |
#       echo "node --version"
#       node -v
#         #npm install npm@6.9.0 -g
#       echo "npm version"
#       npm -v
#       ##npm help json #npm init
# - task: Npm@0
#   displayName: 'Global - Tools - Install npm 6.4.1' # bulding
#   #condition: eq(variables.CACHE_RESTORED, 'true')
#   #enabled: true
#   inputs:
#     command: 'install'
#     workingDir: '$(Build.SourcesDirectory)/'
#     #customCommand: 'i npm@6.4.1'
#   retryCountOnTaskFailure: 5 
# - task: PowerShell@2
#   inputs:
#     targetType: 'inline'
#     script: |
#       echo "node --version"
#       node -v
#         #npm install npm@6.9.0 -g
#       echo "npm version"
#       npm -v
# - task: Npm@1
#   displayName: 'Global - Tools - Install npm 6.4.1' # bulding
#   #condition: eq(variables.CACHE_RESTORED, 'true')
#   #enabled: true
#   inputs:
#     command: 'custom'
#     workingDir: '$(npm_config_cache)'
#     customCommand: 'i -g npm@6.4.1'
#   continueOnError: true         
# - task: Npm@1
#   displayName: 'Global - Tools - Install npm 6.4.1' # bulding
#   #condition: eq(variables.CACHE_RESTORED, 'true')
#   enabled: true
#   inputs:
#     command: 'install'
#     workingDir: '$(npm_config_cache)'
#     customCommand: 'i npm@6.4.1' 
# - task: PowerShell@2
#   inputs:
#     targetType: 'inline'
#     script: |
#       echo "npm"
#       npm -v    

# - task: UseDotNet@2
#   #condition: eq(variables.CACHE_RESTORED, 'true')
#   displayName: 'Global - Tools - Ensure .NET 6.0 SDK'
#   enabled: true
#   inputs:
#     version: '6.0.x'
#     performMultiLevelLookup: true
#     workingDir: '$(npm_config_cache)'

# - task: Bash@3
#   inputs:
#     targetType: 'inline'
#     script: |
#       # Write your commands here
#       cd C:/hostedtoolcache/windows
#       pwd
#       ls -lrta
# - task: Bash@3
#   inputs:
#     targetType: 'inline'
#     script: |
#       echo "cd to node"
#       cd C:/hostedtoolcache/windows/node
#       pwd
#       ls -lrta
#       echo "cd to npm"
#       cd C:/hostedtoolcache/windows/.npm
#       ls -lrta
#       cd _cacache
#       ls -la
#       echo "cd to dotnet"
#       cd C:/hostedtoolcache/windows/dotnet
#       ls -lrta
        
  # - task: Npm@1
  #   displayName: 'Frontend - npm - install'
  #   enabled: true
  #   inputs:
  #     command: 'custom'
  #     #workingDir: '$(Build.SourcesDirectory)/frontend'
  #     customCommand: 'install' #--no-optional #--cache $(npm_config_cache)
  # - task: Npm@1
  #   displayName: 'Frontend - npm - run build'
  #   enabled: true
  #   inputs:
  #     command: 'custom'
  #     #workingDir: '$(Build.SourcesDirectory)/frontend'
  #     customCommand: 'run build'
  # - task: Npm@1
  #   displayName: 'Frontend - npm - run release'
  #   enabled: true
  #   inputs:
  #     command: 'custom'
  #     #workingDir: '$(Build.SourcesDirectory)/frontend'
  #     customCommand: 'run release --cache $(npm_config_cache)'          
  # - task: UseDotNet@2
  #   displayName: 'Global - Tools - Ensure .NET 6.0 SDK'
  #   enabled: true
  #   inputs:
  #     version: '6.0.x'
  #     performMultiLevelLookup: true
  #     workingDir: '$(dotnet_config_cache)'
  #    # installationPath: '$(dotnet_config_cache)'

  # - task: gulp@0
  #   inputs:
  #     gulpFile: 'gulpfile.js'
  #     targets: 'dsdsdvd'
  #     arguments: 'xvcxvc'
  #     workingDirectory: 'vcxvcxv'
  #     gulpjs: 'node_modules/gulp/bin/gulp.js'
  #     enableCodeCoverage: false
# - task: CmdLine@2
#   inputs:
#     script: |
#       echo Write your commands here      
#       echo Hello world
#       # Write your commands here
#       echo "$(Agent.ToolsDirectory)/.npm"
#       echo "$(Build.SourcesDirectory)"
#       ls 
#       echo "Agent.BuildDirectory: $(Agent.BuildDirectory)"
#       echo "Agent.HomeDirectory: $(Agent.HomeDirectory)"
#       echo "Agent.TempDirectory: $(Agent.TempDirectory)"
#       echo "Agent.ToolsDirectory: $(Agent.ToolsDirectory)"
#       echo "Agent.WorkFolder: $(Agent.WorkFolder)"
#       echo "Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)"
#       echo "Build.BinariesDirectory: $(Build.BinariesDirectory)"
#       echo "Build.Repository.LocalPath: $(Build.Repository.LocalPath)"
#       echo "Build.SourcesDirectory: $(Build.SourcesDirectory)"
#       echo "Build.StagingDirectory: $(Build.StagingDirectory)"
#       echo "Common.TestResultsDirectory: $(Common.TestResultsDirectory)"
#       echo "Pipeline.Workspace: $(Pipeline.Workspace)"
#       echo "System.DefaultWorkingDirectory: $(System.DefaultWorkingDirectory)"
#       ls 

  #       cd $(Agent.WorkFolder)
  #       ls -lrta
  #       cd $(Agent.HomeDirectory)
  #       ls -lrta
  #       cd $(Agent.TempDirectory)
  #       ls -lrta